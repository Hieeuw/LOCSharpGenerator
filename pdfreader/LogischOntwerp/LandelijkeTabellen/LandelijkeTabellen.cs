//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template: Logisch Ontwerp BRP 4.2.0 1 januari 2023
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Newtonsoft.Json;

using Centric.PIV.Burgerzaken.RaadplegenPL.ResourceLayer.Brp.Exceptions;
namespace Centric.PIV.Burgerzaken.RaadplegenPL.ResourceLayer.Brp.DomainModel.LogischOntwerp.LandelijkeTabellen
{
	/// <summary>
	/// Representeert Landelijke Tabel32, Nationaliteitentabel
	/// Een opsomming van alle door Nederland erkende nationaliteiten met hun  codes, omschrijvingen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel32
	{
		private static IDictionary<Int16, Tabelregel32> Tabelregels { get; set; }

		private static readonly Lazy<Tabel32> lazy = new Lazy<Tabel32>( () => new Tabel32() );

		public static Tabel32 Instance => lazy.Value;

		private Tabel32()
		{
			Tabelregels = new Dictionary<Int16, Tabelregel32>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel32.csv").Skip(1))
			{
				var tabelregel = new Tabelregel32(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element0511.Waarde, tabelregel);
			}
		}

		public string Omschrijving(Int16 code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel32");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel33, Gemeententabel
	/// Een opsomming van alle huidige en voormalige Nederlandse gemeenten met  hun codes, namen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel33
	{
		private static IDictionary<string, Tabelregel33> Tabelregels { get; set; }

		private static readonly Lazy<Tabel33> lazy = new Lazy<Tabel33>( () => new Tabel33() );

		public static Tabel33 Instance => lazy.Value;

		private Tabel33()
		{
			Tabelregels = new Dictionary<string, Tabelregel33>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel33.csv").Skip(1))
			{
				var tabelregel = new Tabelregel33(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element9210.Waarde, tabelregel);
			}
		}

		public string Omschrijving(string code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			return string.Empty;
		}

		public string Omschrijving(short code) => Omschrijving(code.ToString("D4"));
	}

	/// <summary>
	/// Representeert Landelijke Tabel34, Landentabel
	/// Een opsomming van alle huidige en voormalige landen met hun codes,  namen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel34
	{
		private static IDictionary<Int16, Tabelregel34> Tabelregels { get; set; }

		private static readonly Lazy<Tabel34> lazy = new Lazy<Tabel34>( () => new Tabel34() );

		public static Tabel34 Instance => lazy.Value;

		private Tabel34()
		{
			Tabelregels = new Dictionary<Int16, Tabelregel34>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel34.csv").Skip(1))
			{
				var tabelregel = new Tabelregel34(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element9410.Waarde, tabelregel);
			}
		}

		public string Omschrijving(Int16 code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel34");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel36, Voorvoegseltabel
	/// Een opsomming van de toegestane voorvoegsels.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel36
	{
		private static IDictionary<String, Tabelregel36> Tabelregels { get; set; }

		private static readonly Lazy<Tabel36> lazy = new Lazy<Tabel36>( () => new Tabel36() );

		public static Tabel36 Instance => lazy.Value;

		private Tabel36()
		{
			Tabelregels = new Dictionary<String, Tabelregel36>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel36.csv").Skip(1))
			{
				var tabelregel = new Tabelregel36(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element0231.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel36");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel37, Tabel Reden opnemen/beëindigen nationaliteit
	/// Deze tabel heeft enerzijds betrekking op de Nederlandse nationaliteit en het  bijzonder Nederlanderschap en anderzijds op andere nationaliteiten.     De Nederlandse nationaliteit:   Een opsomming van de wettelijke gronden ter verkrijging/verlies van het  Nederlanderschap met hun codes, omschrijvingen, soorten en  geldigheidstermijnen.    De niet-Nederlandse nationaliteit en het bijzonder Nederlanderschap:  Een opsomming van de redenen waarom de nationaliteitsgegevens anders  dan de Nederlandse op de PL zijn geactualiseerd met hun codes,  omschrijvingen, soorten en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel37
	{
		private static IDictionary<Int16, Tabelregel37> Tabelregels { get; set; }

		private static readonly Lazy<Tabel37> lazy = new Lazy<Tabel37>( () => new Tabel37() );

		public static Tabel37 Instance => lazy.Value;

		private Tabel37()
		{
			Tabelregels = new Dictionary<Int16, Tabelregel37>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel37.csv").Skip(1))
			{
				var tabelregel = new Tabelregel37(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element9610.Waarde, tabelregel);
			}
		}

		public string Omschrijving(Int16 code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel37");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel38, Tabel Adellijke titel/predicaat
	/// Een opsomming van de adellijke titels en/of predicaten die een persoon kan  bezitten of die aan een persoon kunnen worden toegekend met hun codes,  omschrijvingen en soorten.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel38
	{
		private static IDictionary<String, Tabelregel38> Tabelregels { get; set; }

		private static readonly Lazy<Tabel38> lazy = new Lazy<Tabel38>( () => new Tabel38() );

		public static Tabel38 Instance => lazy.Value;

		private Tabel38()
		{
			Tabelregels = new Dictionary<String, Tabelregel38>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel38.csv").Skip(1))
			{
				var tabelregel = new Tabelregel38(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element0221.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel38");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel39, Tabel Akteaanduiding
	/// Een opsomming van de modellen van de akten in de registers van de  burgerlijke stand in Nederland met hun codes en omschrijvingen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel39
	{
		private static IDictionary<String, Tabelregel39> Tabelregels { get; set; }

		private static readonly Lazy<Tabel39> lazy = new Lazy<Tabel39>( () => new Tabel39() );

		public static Tabel39 Instance => lazy.Value;

		private Tabel39()
		{
			Tabelregels = new Dictionary<String, Tabelregel39>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel39.csv").Skip(1))
			{
				var tabelregel = new Tabelregel39(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element8121.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel39");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel41, Tabel Reden ontbinding/nietigverklaring huwelijk/geregistreerd partnerschap
	/// Een opsomming van de wettelijke gronden van ontbinding/ nietigverklaring  van een huwelijk/geregistreerd partnerschap met hun codes, omschrijvingen  en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel41
	{
		private static IDictionary<String, Tabelregel41> Tabelregels { get; set; }

		private static readonly Lazy<Tabel41> lazy = new Lazy<Tabel41>( () => new Tabel41() );

		public static Tabel41 Instance => lazy.Value;

		private Tabel41()
		{
			Tabelregels = new Dictionary<String, Tabelregel41>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel41.csv").Skip(1))
			{
				var tabelregel = new Tabelregel41(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element0741.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel41");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel48, Tabel Nederlands reisdocument
	/// Een opsomming van de modellen van de Nederlandse reisdocumenten met  hun codes, omschrijvingen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel48
	{
		private static IDictionary<String, Tabelregel48> Tabelregels { get; set; }

		private static readonly Lazy<Tabel48> lazy = new Lazy<Tabel48>( () => new Tabel48() );

		public static Tabel48 Instance => lazy.Value;

		private Tabel48()
		{
			Tabelregels = new Dictionary<String, Tabelregel48>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel48.csv").Skip(1))
			{
				var tabelregel = new Tabelregel48(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element3511.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel48");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel49, Tabel Autoriteit van afgifte Nederlands reisdocument
	/// Een opsomming van de autoriteiten die een Nederlands reisdocument kunnen  verstrekken met hun codes, omschrijvingen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel49
	{
		private static IDictionary<String, Tabelregel49> Tabelregels { get; set; }

		private static readonly Lazy<Tabel49> lazy = new Lazy<Tabel49>( () => new Tabel49() );

		public static Tabel49 Instance => lazy.Value;

		private Tabel49()
		{
			Tabelregels = new Dictionary<String, Tabelregel49>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel49.csv").Skip(1))
			{
				var tabelregel = new Tabelregel49(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element3541.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel49");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel56, Verblijfstiteltabel
	/// Een opsomming van de verblijfsrechtelijke statussen met hun codes,  omschrijvingen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel56
	{
		private static IDictionary<Int16, Tabelregel56> Tabelregels { get; set; }

		private static readonly Lazy<Tabel56> lazy = new Lazy<Tabel56>( () => new Tabel56() );

		public static Tabel56 Instance => lazy.Value;

		private Tabel56()
		{
			Tabelregels = new Dictionary<Int16, Tabelregel56>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel56.csv").Skip(1))
			{
				var tabelregel = new Tabelregel56(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element3911.Waarde, tabelregel);
			}
		}

		public string Omschrijving(Int16 code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel56");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel60, RNI-deelnemerstabel
	/// Een opsomming van alle daartoe aangewezen bestuursorganen die als  RNI-deelnemer gegevens aan de RNI leveren, met hun codes,  omschrijvingen en geldigheidstermijnen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel60
	{
		private static IDictionary<Int16, Tabelregel60> Tabelregels { get; set; }

		private static readonly Lazy<Tabel60> lazy = new Lazy<Tabel60>( () => new Tabel60() );

		public static Tabel60 Instance => lazy.Value;

		private Tabel60()
		{
			Tabelregels = new Dictionary<Int16, Tabelregel60>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel60.csv").Skip(1))
			{
				var tabelregel = new Tabelregel60(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element8811.Waarde, tabelregel);
			}
		}

		public string Omschrijving(Int16 code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel60");
		}

	}

	/// <summary>
	/// Representeert Landelijke Tabel61, Gezagsverhoudingtabel
	/// Opsomming van alle mogelijke waarden met hun codes die als  gezagsverhouding bij minderjarige kinderen kunnen worden opgenomen.
	/// </summary>
	[ExcludeFromCodeCoverage]
	public sealed partial class Tabel61
	{
		private static IDictionary<String, Tabelregel61> Tabelregels { get; set; }

		private static readonly Lazy<Tabel61> lazy = new Lazy<Tabel61>( () => new Tabel61() );

		public static Tabel61 Instance => lazy.Value;

		private Tabel61()
		{
			Tabelregels = new Dictionary<String, Tabelregel61>();
			foreach (var rgl in System.IO.File.ReadLines(@"..\..\..\..\ResourceLayer.Brp\DomainModel\LogischOntwerp\LandelijkeTabellen\csv\Tabel61.csv").Skip(1))
			{
				var tabelregel = new Tabelregel61(rgl.Replace($"\",\"", "•").Replace($"\"", string.Empty).Replace($"\r", string.Empty).Replace($"\n", string.Empty));
				Tabelregels.Add(tabelregel.element3211.Waarde, tabelregel);
			}
		}

		public string Omschrijving(String code)
		{
			if (Tabelregels.ContainsKey(code))
				return Tabelregels[code].Omschrijving;
			throw new TabelregelNotFoundException($"code {code} niet aangetroffen in Tabel61");
		}

	}

}
